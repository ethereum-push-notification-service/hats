import { useContext, useState } from "react";
import { useSelector } from "react-redux";
import { RootState } from "../../../../reducers";
import { IVault } from "../../../../types/types";
import { VulnerabilityFormContext } from "../../VulnerabilityForm";
import { ScreenSize } from "../../../../constants/constants";
import { useVaults } from "hooks/useVaults";
import SearchIcon from "../../../../assets/icons/search.icon";
import Loading from "../../../Shared/Loading";
import Project from "./components/Project/Project";
import "./index.scss";
import { useTranslation } from "react-i18next";


export default function ProjectSelect() {
  const { t } = useTranslation();
  const { vulnerabilyData, setVulnerabilyData } = useContext(VulnerabilityFormContext);
  const [userInput, setUserInput] = useState("");
  const { vaults: vaultsData } = useVaults();
  const screenSize = useSelector((state: RootState) => state.layoutReducer.screenSize);

  const handleSelectedProject = (vault: IVault) => {
    setVulnerabilyData(prev =>
    ({
      ...prev!, project: {
        verified: true,
        projectName: vault.description?.["project-metadata"].name!,
        projectId: vault.id,
        contractAddress: vault.master.address
      },
      description: undefined,
      submission: undefined,
      terms: undefined,
    }));
  }

  const vaults = vaultsData?.map((vault: IVault, index: number) => {
    const projectName = vault.description?.["project-metadata"].name;
    if (projectName?.toLowerCase().includes(userInput.toLowerCase()) && !vault.liquidityPool && vault.registered) {
      return (
        <Project
          key={index}
          vault={vault}
          selected={vulnerabilyData?.project?.projectId === vault.id}
          onClick={handleSelectedProject} />
      )
    }
    return undefined;
  })

  return <div className="project-select-wrapper">
    {!vaults ? <Loading /> :
      <>
        <div className="search-wrapper">
          <SearchIcon />
          <input type="text" placeholder="Search or select project" onChange={(e) => setUserInput(e.target.value)} />
        </div>

        {vaults.every((value: any) => value === undefined) ?
          <div className="no-results">{t("ProjectSelect.no-projects")}</div> :
          <div className="table-wrapper">
            <table>
              <tbody>
                {screenSize === ScreenSize.Desktop && (
                  <tr>
                    <th>{t("ProjectSelect.project-name")}</th>
                    <th>{t("ProjectSelect.vault-total")}</th>
                  </tr>
                )}
                {vaults}
              </tbody>
            </table>
          </div>}
      </>}
  </div>
}
