import { isAddress } from "ethers/lib/utils";
import { useCallback, useContext, useEffect, useState } from "react";
import { useEthers } from "@usedapp/core";
import classNames from "classnames";
import { VulnerabilityFormContext } from "../../VulnerabilityForm";
import "styles/Vulnerability/ContactInfo.scss";

export default function ContactInfo() {
  const { account } = useEthers();
  const { vulnerabilyData, setVulnerabilyData } = useContext(VulnerabilityFormContext);
  const [username, setUsername] = useState("");
  const [beneficiary, setBeneficiary] = useState("");

  const usernameInputClass = classNames({
    "input-error": username === ""
  })

  const beneficiaryInputClass = classNames({
    "input-error": beneficiary && !isAddress(beneficiary)
  })

  useEffect(() => {
    setUsername(vulnerabilyData?.contact?.username || "");
    setBeneficiary(vulnerabilyData?.contact?.beneficiary || "");
  }, [vulnerabilyData]);

  useEffect(() => {
    if (!beneficiary && account) {
      setBeneficiary(account);
    }
  }, [beneficiary, account])

  const handleAddContactData = useCallback(() => {
    setVulnerabilyData(prev => {
      if (prev && beneficiary && username) {
        return { ...prev!, contact: { beneficiary, username, verified: true } };
      }
    })
  }, [beneficiary, username, setVulnerabilyData])

  const invalid = username === "" || beneficiary === "" || (beneficiary !== "" && !isAddress(beneficiary!));

  return (
    <div className="contact-info-wrapper card-content">
      <div>1. Add your Telegram user: <br />You will be updated via your Telegram user in the submition progress</div>
      <input className={usernameInputClass} autoFocus type="text" placeholder="@AddYourUserNameHere" value={username} onChange={(e) => setUsername(e.target.value)} />
      <div>2. Add your beneficiary wallet address: <br />The prize will be transferred to the beneficiary wallet address you provide.</div>
      <input className={beneficiaryInputClass} type="text" placeholder="AddTheBeneficiarywalletAddressHere" value={beneficiary} onChange={(e) => setBeneficiary(e.target.value)} />
      {beneficiary !== "" && (beneficiary && !isAddress(beneficiary)) && <span className="error">Please enter a valid address</span>}
      <div className="add-contact-data">
        <button disabled={invalid}  onClick={handleAddContactData}>ADD</button>
      </div>
    </div >
  )
}
