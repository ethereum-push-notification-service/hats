import { useCallback, useEffect, useState } from "react";
import axios from "axios";
import { getAppVersion } from "utils";
import { LocalStorage } from "constants/constants";
import { useEthers, useTransactions } from "@usedapp/core";
import { useVaults } from "hooks/useVaults";
import { DEFAULT_BOT } from "settings";
import { useClaim } from "hooks/contractHooks";
import { calcCid } from "pages/VulnerabilityFormPage/encrypt";
import { VulnerabilityFormContext, VULNERABILITY_INIT_DATA } from "./store";
import { BotStatus, IVulnerabilityData, VulnerabilityStep } from "./types";
// Components
import VulnerabilityFormCard from "./VulnerabilityFormCard/VulnerabilityFormCard";
import ProjectSelect from "./FormSteps/ProjectSelect/ProjectSelect";
import ContactInfo from "./FormSteps/ContactInfo/ContactInfo";
import VulnerabilityDescription from "./FormSteps/VulnerabilityDescription/VulnerabilityDescription";
import TermsAndProcess from "./FormSteps/TermsAndProcess/TermsAndProcess";
import VulnerabilitySubmit from "./FormSteps/VulnerabilitySubmit/VulnerabilitySubmit";
import { StyledVulnerabilityFormPage } from "./styles";

const steps = [
  { title: "SELECT PROJECT", component: ProjectSelect, card: VulnerabilityStep.project },
  { title: "CONTACT INFORMATION", component: ContactInfo, card: VulnerabilityStep.contact },
  { title: "DESCRIBE VULNERABILITY", component: VulnerabilityDescription, card: VulnerabilityStep.description },
  { title: "TERMS AND PROCESS", component: TermsAndProcess, card: VulnerabilityStep.terms },
  { title: "SUBMIT", component: VulnerabilitySubmit, card: VulnerabilityStep.submission },
];

// updateStorage(singleVulnerability): TODO: 
const VulnerabilityFormPage = () => {
  const { vaults } = useVaults();
  const { chainId } = useEthers();
  const [currentStep, setCurrentStep] = useState<number>();
  const [vulnerabilyData, setVulnerabilyData] = useState<IVulnerabilityData>();
  const submittingVulnerability = useTransactions().transactions.some(tx => !tx.receipt)
  const vault = vaults?.find(vault => vault.id === vulnerabilyData?.project?.projectId);

  useEffect(() => {
    try {
      let cachedData: IVulnerabilityData = JSON.parse(localStorage.getItem(LocalStorage.SubmitVulnerability) || JSON.stringify(VULNERABILITY_INIT_DATA));
      if (cachedData.version !== getAppVersion()) {
        setVulnerabilyData(VULNERABILITY_INIT_DATA);
      } else {
        setVulnerabilyData(cachedData);
      }
    } catch (e) {
      setVulnerabilyData(VULNERABILITY_INIT_DATA);
    }
  }, [])

  useEffect(() => {
    localStorage.setItem(LocalStorage.SubmitVulnerability, JSON.stringify(vulnerabilyData));
  }, [vulnerabilyData])

  const reset = () => {
    setVulnerabilyData(VULNERABILITY_INIT_DATA);
  }

  const sendTransactionToBot = useCallback(async (data: IVulnerabilityData) => {
    if (!data) return;
    try {
      const payload = {
        txHash: data.submission?.transactionHash,
        chainId: data.submission?.chainId,
        msg: data.description?.encryptedData,
        route: data.project?.projectName,
        contractAddress: data.project?.contractAddress,
      };

      const res = await axios.post(DEFAULT_BOT, payload);

      if (res.status === 200) {
        setVulnerabilyData(prev => {
          return { ...prev!, submission: { ...prev!.submission!, botStatus: BotStatus.Success } };
        });
      } else {
        setVulnerabilyData(prev => {
          return { ...prev!, submission: { ...prev!.submission!, botStatus: BotStatus.Fail } };
        });
      }
    } catch {
      setVulnerabilyData(prev => {
        return { ...prev!, submission: { ...prev!.submission!, botStatus: BotStatus.Fail } };
      });
    }
  }, []);

  const { send: submit } = useClaim(vault?.master.address)

  const submitVulnerability = useCallback(async () => {
    if (!vulnerabilyData?.description?.encryptedData) return;
    const encryptedData = vulnerabilyData?.description?.encryptedData;
    const tx = await submit(await calcCid(encryptedData));

    if (vulnerabilyData && tx?.transactionHash && chainId) {
      const newVulnerabilityData = {
        ...vulnerabilyData,
        submission: {
          verified: true,
          botStatus: BotStatus.Pending,
          transactionHash: tx?.transactionHash!,
          chainId,
        }
      };

      setVulnerabilyData(newVulnerabilityData);
      sendTransactionToBot(newVulnerabilityData);
    }
  }, [submit, vulnerabilyData, chainId, sendTransactionToBot]);

  useEffect(() => {
    if (!vulnerabilyData) return;
    const index = steps.findIndex(step => !vulnerabilyData[`${VulnerabilityStep[step.card]}`])
    if (index === -1) setCurrentStep(steps.length - 1);
    else setCurrentStep(index);
  }, [vulnerabilyData])

  const context = {
    currentStep,
    setCurrentStep,
    vulnerabilyData,
    setVulnerabilyData,
    submittingVulnerability,
    submitVulnerability,
    sendTransactionToBot,
    reset
  }

  return (
    <StyledVulnerabilityFormPage className="content-wrapper">
      <div id="vulnerabilityFormWrapper" className="accordion-wrapper">
        <VulnerabilityFormContext.Provider value={context}>
          {steps.map((step, index) => (
            <VulnerabilityFormCard
              extraInfoTitle={index === 0 ? vulnerabilyData?.project?.projectName : ""}
              id={index}
              key={index}
              title={step.title}
              collapsed={currentStep !== index}
              card={step.card}
              verified={vulnerabilyData?.[VulnerabilityStep[step.card]] !== undefined}
              disabled={submittingVulnerability} >
              {<step.component />}
            </VulnerabilityFormCard>))}
        </VulnerabilityFormContext.Provider>
      </div>
    </StyledVulnerabilityFormPage>
  );
}

export { VulnerabilityFormPage };