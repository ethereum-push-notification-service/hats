
import { useContext } from "react";
import { useTranslation } from "react-i18next";
import DiscordIcon from "../../../../../../assets/icons/social/discord.icon";
import { Colors, SocialLinks } from "../../../../../../constants/constants";
import Dot from "../../../../../../components/Shared/Dot/Dot";
import { VulnerabilityFormContext } from "pages/VulnerabilityFormPage/store";
import { BotStatus } from "pages/VulnerabilityFormPage/types";
import "./index.scss";

export default function SubmitSuccess() {
  const { t } = useTranslation();
  const { vulnerabilyData, sendTransactionToBot, reset } = useContext(VulnerabilityFormContext);
  const botStatus = vulnerabilyData?.submission?.botStatus;


  return (
    <div className="submit-success-wrapper">
      <div>{t("SubmitVulnerability.Submit.submit-thanks")}</div>
      <div className="transaction-summary-wrapper">
        <div className="transaction-type">{t("SubmitVulnerability.Submit.on-chain-transaction")}</div>
        <div className="status-wrapper">
          <div className="transaction-status">
            <span className="transaction-status-label">{t("SubmitVulnerability.Submit.status")}:</span>
            <Dot color={Colors.turquoise} />
            {t("SubmitVulnerability.Submit.success")}
          </div>
        </div>
      </div>

      <div className="transaction-summary-wrapper">
        <div className="transaction-type">{t("SubmitVulnerability.Submit.bot-confirmation")}</div>
        <div className="status-wrapper">
          <div className="transaction-status">
            <span className="transaction-status-label">{t("SubmitVulnerability.Submit.status")}:</span>
            <Dot color={botStatus === BotStatus.Success ? Colors.turquoise : botStatus === BotStatus.Fail ? Colors.red : Colors.yellow} />
            {botStatus === BotStatus.Success ?
              t("SubmitVulnerability.Submit.success") :
              botStatus === BotStatus.Fail ? t("SubmitVulnerability.Submit.fail") :
                t("SubmitVulnerability.Submit.pending")}
          </div>

          {(botStatus === BotStatus.Fail || botStatus === BotStatus.Pending) && (
            <button disabled={botStatus === BotStatus.Pending} onClick={() => sendTransactionToBot(vulnerabilyData)}>{t("SubmitVulnerability.Submit.bot-resend")}</button>
          )}
        </div>
      </div>

      <div className="response-notice">{t("SubmitVulnerability.Submit.response-notice")}</div>

      {botStatus === BotStatus.Success && (
        <div className="submit-complete-actions-wrapper">
          <span>{t("SubmitVulnerability.Submit.submit-complete-text")}</span>
          <div className="buttons-container">
            <button onClick={() => reset()}>{t("SubmitVulnerability.Submit.submit-new")}</button>
            <button className="discord-btn" onClick={() => window.open(SocialLinks.Discord)}>
              <span>{t("SubmitVulnerability.Submit.join-discord")}</span>
              <DiscordIcon fill={Colors.darkBlue} />
            </button>
          </div>
        </div>
      )}
    </div>
  )
}
