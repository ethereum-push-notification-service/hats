import { useContext } from "react";
import { useTranslation } from "react-i18next";
import DiscordIcon from "../../../../../../assets/icons/social/discord.icon";
import { Colors, SocialLinks } from "../../../../../../constants/constants";
import { Dot } from "components";
import { VulnerabilityFormContext } from "pages/VulnerabilityFormPage/store";
import { BotStatus } from "pages/VulnerabilityFormPage/types";
import "./index.scss";

export default function SubmitSuccess() {
  const { t } = useTranslation();
  const { vulnerabilityData, sendTransactionToBot, reset, submissionTxSucceed } = useContext(VulnerabilityFormContext);
  const botStatus = vulnerabilityData?.submission?.botStatus;
  const txStatus = submissionTxSucceed;

  const getTxStatusInfo = () => {
    const dot = <Dot color={txStatus === true ? Colors.turquoise : txStatus === false ? Colors.red : Colors.yellow} />;
    let text = t("SubmitVulnerability.Submit.pending");
    if (txStatus === true) text = t("SubmitVulnerability.Submit.success");
    if (txStatus === false) text = t("SubmitVulnerability.Submit.fail");

    return (
      <div className="transaction-status">
        <span className="transaction-status-label">{t("SubmitVulnerability.Submit.status")}:</span>
        {dot}
        {text}
      </div>
    );
  };

  const getBotStatusInfo = () => {
    const status = botStatus === BotStatus.Success ? true : botStatus === BotStatus.Fail ? false : null;
    const dot = <Dot color={status === true ? Colors.turquoise : status === false ? Colors.red : Colors.yellow} />;
    let text = t("SubmitVulnerability.Submit.pending");
    if (status === true) text = t("SubmitVulnerability.Submit.success");
    if (status === false) text = t("SubmitVulnerability.Submit.fail");

    return (
      <div className="transaction-status">
        <span className="transaction-status-label">{t("SubmitVulnerability.Submit.status")}:</span>
        {dot}
        {text}
      </div>
    );
  };

  return (
    <div className="submit-success-wrapper">
      <div>{t("SubmitVulnerability.Submit.submit-thanks")}</div>
      <div className="transaction-summary-wrapper">
        <div className="transaction-type">{t("SubmitVulnerability.Submit.on-chain-transaction")}</div>
        <div className="status-wrapper">{getTxStatusInfo()}</div>
      </div>

      <div className="transaction-summary-wrapper">
        <div className="transaction-type">{t("SubmitVulnerability.Submit.bot-confirmation")}</div>
        <div className="status-wrapper">
          {getBotStatusInfo()}

          {(botStatus === BotStatus.Fail || botStatus === BotStatus.Pending) && (
            <button disabled={botStatus === BotStatus.Pending} onClick={() => sendTransactionToBot(vulnerabilityData)}>
              {t("SubmitVulnerability.Submit.bot-resend")}
            </button>
          )}
        </div>
      </div>

      <div className="response-notice">{t("SubmitVulnerability.Submit.response-notice")}</div>

      {botStatus === BotStatus.Success && (
        <div className="submit-complete-actions-wrapper">
          <span>{t("SubmitVulnerability.Submit.submit-complete-text")}</span>
          <div className="buttons-container">
            <button onClick={() => reset()}>SUBMIT NEW VULNERABILITY</button>
            <button className="discord-btn" onClick={() => window.open(SocialLinks.Discord)}>
              <span>JOIN US ON DISCORD</span>
              <DiscordIcon fill={Colors.darkBlue} />
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
