import { useFieldArray, useWatch } from "react-hook-form";
import { useTranslation } from "react-i18next";
import { useEnhancedFormContext } from "hooks/useEnhancedFormContext";
import { Button, FormInput } from "components";
import VulnerabilitySeverityForm from "./VulnerabilitySeverityForm/VulnerabilitySeverityForm";
import { IEditedVaultDescription } from "@shared/types";
import { createNewVulnerabilitySeverity } from "../../utils";
import AddIcon from "@mui/icons-material/Add";

export function VulnerabilitySeveritiesList() {
  const { t } = useTranslation();
  const { control, register } = useEnhancedFormContext<IEditedVaultDescription>();
  const { fields: severities, append, remove } = useFieldArray({ control, name: "vulnerability-severities-spec.severities" });

  const isV1 = useWatch({ control, name: "version" }) === "v1";

  return (
    <>
      <div className="helper-text" dangerouslySetInnerHTML={{ __html: t("vaultEditorSeveritiesExplanation") }} />

      {isV1 && (
        <div>
          <FormInput
            {...register(`vulnerability-severities-spec.indexArray`)}
            label={t("VaultEditor.severities-index-array")}
            colorable
            placeholder={t("VaultEditor.severities-index-array-placeholder")}
          />
        </div>
      )}

      {severities.map((severity, index) => (
        <VulnerabilitySeverityForm key={severity.id} index={index} remove={remove} severitiesCount={severities.length} />
      ))}

      <Button styleType="invisible" onClick={() => append(createNewVulnerabilitySeverity(isV1 ? "v1" : "v2"))}>
        <AddIcon className="mr-1" />
        <span>{t("addSeverity")}</span>
      </Button>
    </>
  );
}
