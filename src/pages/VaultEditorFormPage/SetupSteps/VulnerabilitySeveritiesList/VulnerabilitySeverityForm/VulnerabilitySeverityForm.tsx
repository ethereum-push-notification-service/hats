import { useEffect, useState } from "react";
import { UseFieldArrayRemove, useWatch } from "react-hook-form";
import { useTranslation } from "react-i18next";
import { Button, FormInput } from "components";
import { useEnhancedFormContext } from "hooks/useEnhancedFormContext";
import { IEditedVaultDescription } from "@shared/types";
import { StyledVulnerabilitySeverityForm } from "./styles";
import DeleteIcon from "@mui/icons-material/DeleteOutlineOutlined";
import CollapseIcon from "@mui/icons-material/ExpandMore";
import ExpandIcon from "@mui/icons-material/ExpandLess";

type VulnerabilitySeverityFormProps = {
  index: number;
  severitiesCount: number;
  remove: UseFieldArrayRemove;
};

export default function VulnerabilitySeverityForm({ index, remove, severitiesCount }: VulnerabilitySeverityFormProps) {
  const { t } = useTranslation();

  const { register, control, formState, getFieldState, getValues, setValue } = useEnhancedFormContext<IEditedVaultDescription>();

  const severities = useWatch({ control, name: "vulnerability-severities-spec.severities" });
  const severityName = useWatch({ control, name: `vulnerability-severities-spec.severities.${index}.name` });
  const [isExpanded, setIsExpanded] = useState(!severityName);
  const [showNftInfo, setShowNftInfo] = useState(!severityName);

  // Update severities options for usage in contracts covered
  useEffect(() => {
    const sevOpts = severities.map((sev) => ({ label: sev.name, value: sev.id }));
    const currentSevOpts = getValues("severitiesOptions");

    if (JSON.stringify(sevOpts) !== JSON.stringify(currentSevOpts)) {
      setValue("severitiesOptions", sevOpts);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [severities]);

  const isV1 = useWatch({ control, name: "version" }) === "v1";

  return (
    <StyledVulnerabilitySeverityForm expanded={isExpanded} showNftInfo={showNftInfo}>
      <div className="header" onClick={() => setIsExpanded((prev) => !prev)}>
        {isExpanded ? <CollapseIcon fontSize="large" /> : <ExpandIcon fontSize="large" />}
        <span>{severityName}</span>
      </div>

      <div className="severity">
        <div className="content">
          <div className="subcontent">
            <FormInput
              {...register(`vulnerability-severities-spec.severities.${index}.name`)}
              isDirty={getFieldState(`vulnerability-severities-spec.severities.${index}.name`, formState).isDirty}
              label={t("VaultEditor.severity-name")}
              colorable
              placeholder={t("VaultEditor.severity-name-placeholder")}
            />
            {isV1 ? (
              <FormInput
                {...register(`vulnerability-severities-spec.severities.${index}.index`, { valueAsNumber: true })}
                isDirty={getFieldState(`vulnerability-severities-spec.severities.${index}.index`, formState).isDirty}
                label={t("VaultEditor.severity-index")}
                colorable
                placeholder={t("VaultEditor.severity-index-placeholder")}
              />
            ) : (
              <FormInput
                {...register(`vulnerability-severities-spec.severities.${index}.percentage`, { valueAsNumber: true })}
                isDirty={getFieldState(`vulnerability-severities-spec.severities.${index}.percentage`, formState).isDirty}
                label={t("VaultEditor.percentage-bounty")}
                colorable
                type="number"
                min={0}
                max={100}
                placeholder={t("VaultEditor.percentage-bounty-placeholder")}
              />
            )}
          </div>

          <FormInput
            {...register(`vulnerability-severities-spec.severities.${index}.description`)}
            isDirty={getFieldState(`vulnerability-severities-spec.severities.${index}.description`, formState).isDirty}
            label={t("VaultEditor.severity-description")}
            rows={5}
            type="textarea"
            colorable
            name={`vulnerability-severities-spec.severities.${index}.description`}
            placeholder={t("VaultEditor.severity-description-placeholder")}
          />

          <div className="nft-section">
            <FormInput
              name={`showNftInfo.${index}`}
              checked={showNftInfo}
              type="checkbox"
              label={t("editNft")}
              onChange={(e) => setShowNftInfo(e.target.checked)}
            />

            <div className="nft-info">
              <div className="half">
                <FormInput
                  {...register(`vulnerability-severities-spec.severities.${index}.nft-metadata.name`)}
                  isDirty={
                    getFieldState(`vulnerability-severities-spec.severities.${index}.nft-metadata.name`, formState).isDirty
                  }
                  label={t("VaultEditor.nft-name")}
                  colorable
                  placeholder={t("VaultEditor.nft-name-placeholder")}
                />
              </div>

              <FormInput
                {...register(`vulnerability-severities-spec.severities.${index}.nft-metadata.description`)}
                isDirty={
                  getFieldState(`vulnerability-severities-spec.severities.${index}.nft-metadata.description`, formState).isDirty
                }
                label={t("VaultEditor.nft-description")}
                rows={2}
                type="textarea"
                colorable
                placeholder={t("VaultEditor.nft-description-placeholder")}
              />

              <div className="inputs">
                <FormInput
                  {...register(`vulnerability-severities-spec.severities.${index}.nft-metadata.image`)}
                  isDirty={
                    getFieldState(`vulnerability-severities-spec.severities.${index}.nft-metadata.image`, formState).isDirty
                  }
                  label={t("VaultEditor.nft-image")}
                  pastable
                  colorable
                  placeholder={t("VaultEditor.nft-image-placeholder")}
                />

                <FormInput
                  {...register(`vulnerability-severities-spec.severities.${index}.nft-metadata.animation_url`)}
                  isDirty={
                    getFieldState(`vulnerability-severities-spec.severities.${index}.nft-metadata.animation_url`, formState)
                      .isDirty
                  }
                  label={t("VaultEditor.nft-animation")}
                  pastable
                  colorable
                  placeholder={t("VaultEditor.nft-animation-placeholder")}
                />
              </div>
            </div>
          </div>
        </div>

        {severitiesCount > 1 && (
          <div className="controller-buttons">
            <Button styleType="filled" onClick={() => remove(index)}>
              <DeleteIcon className="mr-1" />
              <span>{t("removeSeverity")}</span>
            </Button>
          </div>
        )}
      </div>
    </StyledVulnerabilitySeverityForm>
  );
}
