import { useEffect } from "react";
import { UseFieldArrayRemove, useWatch } from "react-hook-form";
import { useTranslation } from "react-i18next";
import RemoveIcon from "assets/icons/remove-member.svg";
import { FormInput } from "components";
import { StyledVulnerabilitySeverityForm } from "./styles";
import { IVulnerabilitySeverity } from "types";
import { createNewVulnerabilitySeverity } from "../../utils";
import { IEditedVaultDescription } from "../../types";
import { useEnhancedFormContext } from "hooks/useEnhancedFormContext";

type VulnerabilitySeverityFormProps = {
  index: number;
  severitiesCount: number;
  append: (data: IVulnerabilitySeverity) => void;
  remove: UseFieldArrayRemove;
};

export default function VulnerabilitySeverityForm({ index, append, remove, severitiesCount }: VulnerabilitySeverityFormProps) {
  const { t } = useTranslation();
  const { register, control, formState, getFieldState, getValues, setValue } = useEnhancedFormContext<IEditedVaultDescription>();

  const severities = useWatch({ control, name: "vulnerability-severities-spec.severities" });

  useEffect(() => {
    const sevOpts = severities.map((sev) => ({ label: sev.name, value: sev.id }));
    const currentSevOpts = getValues("severitiesOptions");

    if (JSON.stringify(sevOpts) !== JSON.stringify(currentSevOpts)) {
      setValue("severitiesOptions", sevOpts);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [severities]);

  const isV1 = useWatch({ control, name: "version" }) === "v1";

  return (
    <StyledVulnerabilitySeverityForm>
      <div className="severity">
        <div className="index-number">{index + 1}</div>

        <div className="content">
          <div className="subcontent">
            <div className="name">
              <FormInput
                {...register(`vulnerability-severities-spec.severities.${index}.name`)}
                isDirty={getFieldState(`vulnerability-severities-spec.severities.${index}.name`, formState).isDirty}
                label={t("VaultEditor.severity-name")}
                colorable
                placeholder={t("VaultEditor.severity-name-placeholder")}
              />
            </div>
            <div className="severities">
              {isV1 ? (
                <FormInput
                  {...register(`vulnerability-severities-spec.severities.${index}.index`, { valueAsNumber: true })}
                  isDirty={getFieldState(`vulnerability-severities-spec.severities.${index}.index`, formState).isDirty}
                  label={t("VaultEditor.severity-index")}
                  colorable
                  placeholder={t("VaultEditor.severity-index-placeholder")}
                />
              ) : (
                <FormInput
                  {...register(`vulnerability-severities-spec.severities.${index}.percentage`, { valueAsNumber: true })}
                  isDirty={getFieldState(`vulnerability-severities-spec.severities.${index}.percentage`, formState).isDirty}
                  label={t("VaultEditor.percentage-bounty")}
                  colorable
                  type="number"
                  min={0}
                  max={100}
                  placeholder={t("VaultEditor.percentage-bounty-placeholder")}
                />
              )}
            </div>
          </div>

          <FormInput
            {...register(`vulnerability-severities-spec.severities.${index}.description`)}
            isDirty={getFieldState(`vulnerability-severities-spec.severities.${index}.description`, formState).isDirty}
            label={t("VaultEditor.severity-description")}
            type="textarea"
            pastable
            colorable
            name={`vulnerability-severities-spec.severities.${index}.description`}
            placeholder={t("VaultEditor.severity-description-placeholder")}
          />

          <p className="description">{t("VaultEditor.nft-metadata")}</p>

          <FormInput
            {...register(`vulnerability-severities-spec.severities.${index}.nft-metadata.name`)}
            isDirty={getFieldState(`vulnerability-severities-spec.severities.${index}.nft-metadata.name`, formState).isDirty}
            label={t("VaultEditor.nft-name")}
            pastable
            colorable
            placeholder={t("VaultEditor.nft-name-placeholder")}
          />

          <FormInput
            {...register(`vulnerability-severities-spec.severities.${index}.nft-metadata.description`)}
            isDirty={
              getFieldState(`vulnerability-severities-spec.severities.${index}.nft-metadata.description`, formState).isDirty
            }
            label={t("VaultEditor.nft-description")}
            pastable
            colorable
            placeholder={t("VaultEditor.nft-description-placeholder")}
          />

          <FormInput
            {...register(`vulnerability-severities-spec.severities.${index}.nft-metadata.image`)}
            isDirty={getFieldState(`vulnerability-severities-spec.severities.${index}.nft-metadata.image`, formState).isDirty}
            label={t("VaultEditor.nft-image")}
            pastable
            colorable
            placeholder={t("VaultEditor.nft-image-placeholder")}
          />

          <FormInput
            {...register(`vulnerability-severities-spec.severities.${index}.nft-metadata.animation_url`)}
            isDirty={
              getFieldState(`vulnerability-severities-spec.severities.${index}.nft-metadata.animation_url`, formState).isDirty
            }
            label={t("VaultEditor.nft-animation")}
            pastable
            colorable
            placeholder={t("VaultEditor.nft-animation-placeholder")}
          />
        </div>
      </div>

      <div className="controller-buttons">
        {severitiesCount > 1 && (
          <button type="button" className="fill" onClick={() => remove(index)}>
            <img src={RemoveIcon} height={12} alt="remove-member" />
            {` ${t("VaultEditor.remove-member")}`}
          </button>
        )}
        {index === severitiesCount - 1 && (
          <button type="button" className="fill" onClick={() => append(createNewVulnerabilitySeverity(isV1 ? "v1" : "v2"))}>
            {t("VaultEditor.add-member")}
          </button>
        )}
      </div>
    </StyledVulnerabilitySeverityForm>
  );
}
